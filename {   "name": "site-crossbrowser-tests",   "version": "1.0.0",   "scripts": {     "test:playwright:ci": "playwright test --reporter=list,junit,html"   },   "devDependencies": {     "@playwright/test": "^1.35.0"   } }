name: Cross-Browser & Security Tests

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to test (overrides repo secret TARGET_URL)'
        required: false
        default: ''
      fail_high_threshold:
        description: 'Fail if ZAP High alerts >= (default 3)'
        required: false
        default: '3'
      fail_critical_threshold:
        description: 'Fail if ZAP Critical alerts >= (default 1)'
        required: false
        default: '1'
  schedule:
    - cron: '0 3 * * 1'  # optional weekly run — adjust or remove

jobs:
  tests-and-scan:
    runs-on: ubuntu-latest
    env:
      OUTDIR: scan-results
      PLAYWRIGHT_SCREENSHOT_DIR: playwright-screenshots
      TARGET_URL: ${{ secrets.TARGET_URL || '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine target
        id: vars
        run: |
          INPUT="${{ github.event.inputs.target_url }}"
          TARGET="$( [ -n "$INPUT" ] && echo "$INPUT" || echo "$TARGET_URL" )"
          if [ -z "$TARGET" ]; then
            TARGET="${{ secrets.TARGET_URL || '' }}"
          fi
          if [ -z "$TARGET" ]; then
            echo "No target specified. Set TARGET_URL secret or pass target_url when running the workflow."
            exit 1
          fi
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "fail_high=${{ github.event.inputs.fail_high_threshold }}" >> $GITHUB_OUTPUT
          echo "fail_crit=${{ github.event.inputs.fail_critical_threshold }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright tests (multiple browsers/devices)
        env:
          TARGET_URL: ${{ steps.vars.outputs.target }}
        run: |
          mkdir -p $PLAYWRIGHT_SCREENSHOT_DIR
          npm run test:playwright:ci
        # do NOT stop collecting artifacts even if tests fail
        continue-on-error: false

      - name: Collect Playwright artifacts (always)
        if: always()
        run: |
          mkdir -p $OUTDIR/playwright
          # copy HTML report, junit xml, screenshots
          cp -R playwright-report $OUTDIR/playwright/ 2>/dev/null || true
          mkdir -p $OUTDIR/playwright/screenshots
          cp -R playwright-screenshots/* $OUTDIR/playwright/screenshots/ 2>/dev/null || true
          cp -R results $OUTDIR/playwright/ 2>/dev/null || true
          ls -la $OUTDIR/playwright || true

      - name: Run ZAP baseline scan (action)
        if: always()
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: ${{ steps.vars.outputs.target }}
          artifact_name: zap_report
          allow_issue_writing: 'false'
          fail_action: 'warn'
        continue-on-error: true

      - name: Collect ZAP outputs
        if: always()
        run: |
          mkdir -p $OUTDIR/zap
          # copy likely zap outputs into outdir
          cp -v zap_report.* $OUTDIR/zap/ 2>/dev/null || true
          find . -maxdepth 3 -type f -iname '*zap*report*.html' -o -iname '*zap*report*.json' -print | while read f; do cp -v "$f" "$OUTDIR/zap/" 2>/dev/null || true; done
          ls -la $OUTDIR/zap || true

      - name: Upload combined artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-browser-scan-results
          path: $OUTDIR

      - name: Fail if ZAP High/Critical alerts >= thresholds
        if: always()
        run: |
          set -euo pipefail
          ZAP_JSON=$(ls -1 scan-results/zap/*zap_report_*.json 2>/dev/null | tail -n1 || true)
          if [ -z "$ZAP_JSON" ]; then
            echo "No ZAP JSON found, skipping threshold check."
            exit 0
          fi
          echo "Using ZAP JSON: $ZAP_JSON"
          HIGH_COUNT=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' "$ZAP_JSON")
          CRIT_COUNT=$(jq '[.site[].alerts[] | select(.risk == "Critical")] | length' "$ZAP_JSON")
          echo "High Alerts: $HIGH_COUNT | Critical Alerts: $CRIT_COUNT"
          FAIL_HIGH=${{ steps.vars.outputs.fail_high }}
          FAIL_CRIT=${{ steps.vars.outputs.fail_crit }}
          if [ "$HIGH_COUNT" -ge "$FAIL_HIGH" ] || [ "$CRIT_COUNT" -ge "$FAIL_CRIT" ]; then
            echo "Threshold exceeded — failing job"
            exit 1
          fi
          echo "Thresholds OK."
