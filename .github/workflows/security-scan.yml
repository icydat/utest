name: Security Scan (ZAP baseline) - Action-based (Fixed)

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL (overrides TARGET_URL secret / env)'
        required: false
        default: ''
      run_note:
        description: 'Optional note for this run'
        required: false
        default: ''
      fail_high_threshold:
        description: 'Fail if ZAP High alerts >= (default 3)'
        required: false
        default: '3'
      fail_critical_threshold:
        description: 'Fail if ZAP Critical alerts >= (default 1)'
        required: false
        default: '1'

jobs:
  zap-baseline:
    runs-on: ubuntu-latest
    env:
      OUTDIR: scan-results
      # Optional: if you used a prefilled TARGET_URL in your workflow file earlier, leave it here.
      TARGET_URL: ${{ secrets.TARGET_URL || '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine target (input -> env -> secret)
        id: vars
        run: |
          # Priority: workflow_dispatch input -> env.TARGET_URL -> repo secret TARGET_URL
          INPUT="${{ github.event.inputs.target_url }}"
          IF_EMPTY() { [ -z "$1" ] && echo "$2" || echo "$1"; }
          TARGET="$(IF_EMPTY "$INPUT" "$TARGET_URL")"
          if [ -z "$TARGET" ]; then
            # try repo secret if not set above
            TARGET="${{ secrets.TARGET_URL || '' }}"
          fi
          if [ -z "$TARGET" ]; then
            echo "No target specified: set TARGET_URL secret or pass target_url when running the workflow."
            exit 1
          fi
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "fail_high=${{ github.event.inputs.fail_high_threshold }}" >> $GITHUB_OUTPUT
          echo "fail_crit=${{ github.event.inputs.fail_critical_threshold }}" >> $GITHUB_OUTPUT

      - name: Create output directory & install jq
        run: |
          mkdir -p $OUTDIR
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Run ZAP baseline scan (uses zaproxy/action-baseline-scan)
        # Using the GitHub Action avoids direct docker pulls by the runner and is more reliable.
        uses: zaproxy/action-baseline-scan@v0.6.0
        with:
          target: ${{ steps.vars.outputs.target }}
          # base name for outputs the action will create: zap_report.html and zap_report.json
          output: zap_report
          format: html,json
        # Allow the action to fail gracefully; we'll capture output regardless
        continue-on-error: true

      - name: Save ZAP reports with timestamp
        if: always()
        run: |
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          mkdir -p $OUTDIR
          # Move action-generated files into scan-results with timestamp so artifacts are stable
          if [ -f zap_report.html ]; then
            mv zap_report.html "$OUTDIR/zap_report_${TIMESTAMP}.html"
            echo "Saved $OUTDIR/zap_report_${TIMESTAMP}.html"
          else
            echo "No zap_report.html found"
          fi
          if [ -f zap_report.json ]; then
            mv zap_report.json "$OUTDIR/zap_report_${TIMESTAMP}.json"
            echo "Saved $OUTDIR/zap_report_${TIMESTAMP}.json"
          else
            echo "No zap_report.json found"
          fi
          # Show files for debugging
          ls -la $OUTDIR || true

      - name: Upload scan results artifact
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: scan-results

      - name: Fail if High/Critical alerts >= thresholds
        if: always()
        run: |
          set -euo pipefail
          # Find the latest ZAP JSON report in scan-results
          ZAP_JSON=$(ls -1 scan-results/*zap_report_*.json 2>/dev/null | tail -n1 || true)
          if [ -z "$ZAP_JSON" ]; then
            echo "No ZAP JSON report found in scan-results. Skipping threshold check."
            exit 0
          fi
          echo "Using ZAP JSON: $ZAP_JSON"
          HIGH_COUNT=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' "$ZAP_JSON")
          CRIT_COUNT=$(jq '[.site[].alerts[] | select(.risk == "Critical")] | length' "$ZAP_JSON")
          echo "High Alerts: $HIGH_COUNT | Critical Alerts: $CRIT_COUNT"
          FAIL_HIGH=${{ steps.vars.outputs.fail_high }}
          FAIL_CRIT=${{ steps.vars.outputs.fail_crit }}
          echo "Thresholds: High >= $FAIL_HIGH, Critical >= $FAIL_CRIT"
          if [ "$HIGH_COUNT" -ge "$FAIL_HIGH" ] || [ "$CRIT_COUNT" -ge "$FAIL_CRIT" ]; then
            echo "Threshold exceeded — failing job"
            exit 1
          fi
          echo "No threshold violations — job will be marked successful."
